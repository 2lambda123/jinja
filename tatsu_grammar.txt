start
    =
    expressions
    $
    ;

expressions
    =
    {expression}*
    ;

expression
    =
    content | raw_block_expression | block_expression | variable_expression | comment_expression
    ;

raw_block_expression
    =
    raw_block_start
    { !raw_block_end CHAR }*
    raw_block_end
    ;

raw_block_start
    =
    block_open "raw" block_close
    ;

raw_block_end
    =
    block_open "endraw" block_close
    ;

block_expression
    =
    block_start {SP}* expressions {SP}* block_end
    | block_start
    ;

block_start
    =
    block_open type:`blockstart` !("end") name:IDENTIFIER parameters:[{block_parameter}*] block_close
    ;

block_end
    =
    block_open type:`blockend` "end" name:IDENTIFIER block_close
    ;

block_open
    =
    @:"{%" {SP}*
    ;
block_close
    =
    {SP}* @:"%}"
    ;

block_parameter
    =
    variable_accessor_call_parameter
    ;

variable_expression
    =
    variable_open type:`variable` name:variable_identifier { !variable_close filters+:variable_filter }* variable_close
    ;
variable_open
    =
    @:"{{" {SP}*
    ;
variable_close
    =
    {SP}* @:"}}"
    ;

variable_identifier
    =
    ( IDENTIFIER | LITERAL )
    { variable_accessor }*
    ;

variable_accessor
    =
    variable_accessor_brackets | variable_accessor_call | variable_accessor_dot
    ;

variable_accessor_brackets
    =
    "[" variable_identifier "]"
    ;

variable_accessor_call
    =
    "(" [variable_accessor_call_parameters] ")"
    ;

variable_accessor_call_parameters
    =
    @+:variable_accessor_call_parameter
    { "," @+:variable_accessor_call_parameter }*
    ;

variable_accessor_call_parameter
    =
    variable_accessor_call_parameter_key_value
    | variable_accessor_call_parameter_value_only
    ;

variable_accessor_call_parameter_key_value
    =
    {SP}* key:IDENTIFIER {SP}* "=" value:variable_accessor_call_parameter_value {SP}*
    ;

variable_accessor_call_parameter_value_only
    =
    value:variable_accessor_call_parameter_value
    ;

variable_accessor_call_parameter_value
    =
    {SP}* @:variable_identifier {SP}*
    ;

variable_accessor_dot
    =
    "." variable_identifier
    ;

variable_filter
    =
    {SP}* "|" {SP}* @:filter
    ;
filter =
    name:IDENTIFIER
    [arguments:filter_parameters]
    ;

filter_parameters
    =
    "(" @:variable_accessor_call_parameters ")"
    ;

comment_expression      = comment_open comment_content comment_close ;
comment_open            = "{#" ;
comment_close           = "#}" ;
comment_content         = {!comment_close CHAR}* ;

content                 = !(block_open | variable_open | comment_open) CHAR ;

LITERAL
    =
    STRING_LITERAL | NUMBER_LITERAL
    ;

INTEGER_LITERAL
    =
    /[\d_]*\d+/
    ;

NUMBER_LITERAL
    =
    whole:INTEGER_LITERAL
    ["." fractional:INTEGER_LITERAL]
    [ "e" exponent:[ ( "+" | "-" ) ] INTEGER_LITERAL ]
    ;

STRING_LITERAL
    =
    STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_DOUBLE_QUOTE
    ;

STRING_LITERAL_SINGLE_QUOTE
    =
    "'" { !"'" /./ }* "'"
    ;

STRING_LITERAL_DOUBLE_QUOTE
    =
    '"' { !'"' /./ }* '"'
    ;

IDENTIFIER
    =
    /[a-zA-Z_][a-zA-Z0-9_]*/
    ;

ALPHA
    =
    /[a-zA-Z]/
    ;

DIGIT
    =
    /[0-9]/
    ;

SP
    =
    /\s/
    ;

CHAR
    =
    ?'.' | ?'\s'
    ;