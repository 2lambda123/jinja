start
    =
    expressions
    $
    ;

expressions
    =
    {expression}*
    ;

expression
    =
    | content
    | raw_block_expression
    | block_expression
    | line_block_expression
    | variable_expression
    | comment_expression
    | line_comment_expression
    ;

raw_block_expression
    =
    raw_block_start
    raw:{ !raw_block_end CHAR }*
    raw_block_end
    ;

raw_block_start
    =
    block_open "raw" {SP}* block_close
    ;

raw_block_end
    =
    block_open "endraw" {SP}* block_close
    ;

block_expression
    =
    | ( start:block_start contents:expressions end:block_end )
    | block:block_start
    ;

block_start
    =
    block_open !("end") name:IDENTIFIER {SP}* parameters:[ block_parameters ] {SP}* block_close
    ;

block_end
    =
    block_open "end" name:IDENTIFIER {SP}* block_close
    ;

block_open
    =
    | @:"{%" {SP}*
    | {SP}* @:"{%-" {SP}*
    ;

block_close
    =
    | @:"%}"
    | ( @:"-%}" {SP}* )
    ;

line_block_expression
    =
    | ( start:line_block_start contents:expressions end:line_block_end )
    | block:line_block_start
    ;

line_block_start
    =
    line_block_open !("end") name:IDENTIFIER {SP}* parameters:[ line_block_parameters ] { !"\n" SP }* [ ":" { !"\n" SP }* ] "\n"
    ;

line_block_end
    =
    line_block_open "end" name:IDENTIFIER "\n"
    ;

line_block_open
    =
    "\n" {SP}* @:"# " {SP}*
    ;

line_block_parameters
    =
    @+:block_parameter { { !"\n" SP }* @+:block_parameter }*
    ;

implicit_identifier_tuple
    =
    tuple+:IDENTIFIER { {SP}* "," {SP}* tuple+:IDENTIFIER }+
    ;

block_parameters
    =
    @+:block_parameter { {SP}* @+:block_parameter }*
    ;

block_parameter
    =
    | block_parameter_key_value
    | block_parameter_value_only
    ;

block_parameter_key_value
    =
    key:block_parameter_key {SP}* "=" {SP}* value:variable_accessor_call_parameter_value
    ;

block_parameter_key
    =
    | implicit_identifier_tuple
    | variable_accessor_call_parameter_key
    ;

block_parameter_value_only
    =
    | value:implicit_identifier_tuple
    | value:variable_accessor_call_parameter_value
    ;

variable_expression
    =
    variable_open type:`variable` name:variable_identifier variable_close
    ;
variable_open
    =
    @:"{{" {SP}*
    ;
variable_close
    =
    {SP}* @:"}}"
    ;

variable_identifier
    =
    variable:( LITERAL | IDENTIFIER )
    accessors:{ variable_accessor }*
    { {SP}* filters+:variable_filter }*
    ;

variable_accessor
    =
    | variable_accessor_brackets
    | variable_accessor_call
    | variable_accessor_dot
    ;

variable_accessor_brackets
    =
    accessor_type:`brackets`
    "[" parameter:variable_identifier "]"
    ;

variable_accessor_call
    =
    accessor_type:`call`
    "(" parameters:[variable_accessor_call_parameters] ")"
    ;

variable_accessor_dot
    =
    accessor_type:`dot`
    "." parameter:variable_identifier
    ;

variable_accessor_call_parameters
    =
    @+:variable_accessor_call_parameter
    { {SP}* "," {SP}* @+:variable_accessor_call_parameter }*
    ;

variable_accessor_call_parameter
    =
    | variable_accessor_call_parameter_key_value
    | variable_accessor_call_parameter_value_only
    ;

variable_accessor_call_parameter_key_value
    =
    key:variable_accessor_call_parameter_key {SP}* "=" {SP}* value:variable_accessor_call_parameter_value
    ;

variable_accessor_call_parameter_value_only
    =
    value:variable_accessor_call_parameter_value
    ;

variable_accessor_call_parameter_key
    =
    IDENTIFIER
    ;

variable_accessor_call_parameter_value
    =
    | variable_tests
    | variable_identifier
    ;

variable_tests
    =
    left:variable_identifier {SP}*
    (
        | ( "is" {SP}* test_function:variable_accessor_call_parameter_value )
        | ( comparator:variable_tests_comparator {SP}* right:variable_accessor_call_parameter_value )
        | ( logical_operator:variable_tests_logical_operator {SP}* right:variable_accessor_call_parameter_value )
    )
    ;

variable_tests_comparator
    =
    | "=="
    | "!="
    | ">"
    | ">="
    | "<"
    | "<="
    ;

variable_tests_logical_operator
    =
    | "and"
    | "or"
    ;

variable_filter
    =
    "|" {SP}* @:filter
    ;
filter =
    name:IDENTIFIER
    [arguments:filter_parameters]
    ;

filter_parameters
    =
    "(" @:variable_accessor_call_parameters ")"
    ;

comment_expression
    =
    comment_open comment:comment_content comment_close
    ;

comment_open
    =
    "{#"
    ;

comment_close
    =
    "#}"
    ;

comment_content
    =
    { !comment_close CHAR }*
    ;

line_comment_expression
    =
    line_comment_open comment:line_comment_content &"\n"
    ;

line_comment_open
    =
    {SP}* "## "
    ;

line_comment_content
    =
    { !"\n" CHAR }*
    ;

content
    =
    !(
        | line_block_open
        | block_open
        | variable_open
        | comment_open
        | line_comment_open
    ) CHAR ;

LITERAL
    =
    | STRING_LITERAL
    | NUMBER_LITERAL
    | BOOLEAN_LITERAL
    | LIST_LITERAL
    | TUPLE_LITERAL
    ;

LIST_LITERAL
    =
    literal_type:`list`
    (
        | ( "[" {SP}* value+:LITERAL {SP}* { "," {SP}* value+:LITERAL }* {SP}* "]" )
        | ( "[" {SP}* "]" )
    )
    ;

TUPLE_LITERAL
    =
    literal_type:`tuple`
    (
        | ( "(" {SP}* value+:LITERAL {SP}* { "," {SP}* value+:LITERAL {SP}* } ")" )
        | ( "(" {SP}* value+:LITERAL {SP}* "," {SP}* ")" )
    )
    ;

INTEGER_LITERAL
    =
    /[\d_]*\d+/
    ;

NUMBER_LITERAL
    =
    literal_type:`number`
    whole:INTEGER_LITERAL
    ["." fractional:INTEGER_LITERAL]
    [ ( "e" | "E" ) exponent:[ ( "+" | "-" ) ] INTEGER_LITERAL ]
    ;

STRING_LITERAL
    =
    | STRING_LITERAL_SINGLE_QUOTE
    | STRING_LITERAL_DOUBLE_QUOTE
    ;

STRING_LITERAL_SINGLE_QUOTE
    =
    literal_type:`string`
    "'" value:{ !"'" /./ }* "'"
    ;

STRING_LITERAL_DOUBLE_QUOTE
    =
    literal_type:`string`
    '"' value:{ !'"' /./ }* '"'
    ;

BOOLEAN_LITERAL
    =
    literal_type:`boolean`
    (
        | ( ("true" | "True") value:`True`)
        | ( ("false" | "False") value:`False`)
    )
    ;

IDENTIFIER
    =
    /[a-zA-Z_][a-zA-Z0-9_]*/
    ;

ALPHA
    =
    /[a-zA-Z]/
    ;

DIGIT
    =
    /[0-9]/
    ;

SP
    =
    /\s/
    ;

CHAR
    =
    | ?'.'
    | ?'\s'
    ;